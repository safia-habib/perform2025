{"version":1,"defaultTimeframe":{"from":"now()-2h","to":"now()"},"defaultSegments":[],"sections":[{"id":"0","type":"markdown","markdown":"#### Level 2 - Create a Site Reliability Guardian (SRG)\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_1.png)\n\n* Use Site Reliability Guardian to create a new guardian\n* Specify objectives you would like to validate automatically\n* Create/Upload a workflow to automate the change impacts analysis\n* Trigger a validation on demand or by sending an event to Dynatrace\n* Leverage the validation result to enrich your release process"},{"id":"7d9425de-cea4-4da0-9d1d-cd83a00fd9f0","type":"markdown","markdown":"\n#### Step 1 - Create a new SRG\nBegin by opening the Site Reliability Guardian App within the Dynatrace environment.\n\n### Tags for organization and automation\n\n![SRG Tags](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new1.png)\n\n1. Click on `+ Guardian` to create a new Guardian\n\n2. SRG provides some great templates to get you started, so identify an existing template to help solve **our current problem** and click `Use Template`.\n    - **Skip** the `Entity Selection`\n\n3. Update the Guardian's name, perhaps with the the app name and your team name.  Enter a description, such as `release validation for our deployment`.  To integrate the Guardian into the lifecycle on our IDP, **specify the following tags**:\n    - owner = your team number (i.e. \"teamXX\")\n    - proj_name = your project name (i.e.\"simplenodeservice\")\n    - stage =  the stage of the deployed app (i.e.\"preprod\")\n    - notify = true\n\n4. `Save` your Guardian\n\n--- \n \n##### *Hint - Use an Existing template*\n\n![SRG Variables](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_3.png)\n\n1. Since we're dealing with a vulnerability, select the `Security Gate` Template\n\n2. Complete Tasks 2-4 above from Step 1\n\n--- \n\n#### Step 2 - Update the existing Objectives\n\n\n1. Click on each individual Objective to the Guardian\n\n2. Scroll down on the right side panel and update the `Define thresholds` section\n    - Select `No thresholds` to make the Objective an \"Information Objective\"\n\n3. Repeat this for all 4 of the existing Objectives in our Guardian\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new2.png)\n\n--- \n \n#### Step 3 - Define a New Objective with DQL and static thresholds\n\n1. Click on `Add New Objective` and name the new objective `Node4Shell`.  \n  - Enter a description, such as `vulnerability detection in preprod`. \n  - Guardian objectives support DQL queries and Classic SLO metrics.  Choose `Grail using DQL`.  \n  - Paste the query below into the `DQL Query` field. \n\n```\nfetch events\n| filter event.kind == \"SECURITY_EVENT\"\n| filter event.category == \"VULNERABILITY_MANAGEMENT\"\n| filter event.status==\"OPEN\"\n| lookup [fetch dt.entity.process_group], sourceField:affected_entity.id, lookupField:id\n| fieldsRename lookup.entity.name, processName \n| filter isNotNull(processName)\n| filter matchesValue(vulnerability.external_id, \"PLACEHOLDER\")\n| filter matchesValue(processName, \"PLACEHOLDER\")\n| summarize val=arraySize(collectDistinct(vulnerability.id))\n| fields `Filtered high-profile vulnerabilities`=if(isNull(val), 0, else: val)\n```\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new3.png)\n\n2. In the `Define thresholds` section, choose `Static thresholds`.  Our query is structured such that 0 is perfect and anything greater than 0 is problematic.  \n  - Choose `A lower value is good for my result` with `Fails if result > 0`\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new4.png)\n\n--- \n\n#### Step 4 - Update DQL Query for Node4Shell Objective\n\n1. Read **closely** through the query and update as necessary (Note - you don't have to be a DQL Expert for this!)\n\n##### * Hint - Find and update the PLACEHOLDERs in the Query*\n\n* The first `PLACEHOLDER` should be your Vulnerability Reference CVE (*i.e. CVE-XXXX-YYYYY*)\n\n* The second `PLACEHOLDER` should be your affected Process Group Name from the Vulnerability (*i.e. app.js simplenodeservice*)\n\n##### `Save` your Guardian!\n\n--- "},{"id":"3","type":"markdown","markdown":"\nGuardians can be executed manually on-demand or through a Workflow automation.\n\n### Manually with On-Demand Validation\n\n![SRG Manual Validatioin](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new6.png)\n\nOpen your Guardian and locate the `Validate` button in the top right corner.  Click it and choose `Last 1 hour` for the validation timeframe, then click `Validate`.\n\nThe validation results will show up below, shortly.\n - *Note - this Guardian should `Fail` since our vulnerability still exists in our environment!*\n\n### View the results in the validated objectives\n\n![SRG Validation Results](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new5.png)\n\nIn the Validation result, click on one of the objectives (the red/blue lines) and find details on the Validated objectives.  The result of each DQL query objective for the validation timeframe (last 30 minutes) will be shown.  The result is evaluated against the static thresholds to determine pass, warning, or fail.\n\nThe worst evaluated objective result will be used to determine the overall Guardian validation result.  That is to say, if any of the objective results fail, then the validation result is fail.  You can use Automation workflow capabilities or IDP tooling capabilities to apply additional logic and quality gating."},{"id":"4","type":"markdown","markdown":"\n#### Step 5 - Triggering SRG based on Lifecycle Event\n\n![Trigger SRG on Lifecycle Event](https://university.dynatrace.com/assets/50312/04_04_srg_lifecycle_trigger.png)\n\n1. From the Guardian overview, click on `Automate` to create a new Workflow automation\n\n2. A new Workflow automation will be created with an `Event Trigger` and a Site Reliability Guardian `Task` already configured.  Modify the `Event Trigger` to use `events` as the Event type.  Modify the `Filter query` using the query below:\n\n3. Note - you don't have to update anything in the 'run_validation' task.\n\n##### Be sure to replace `owner`, `proj_name`, and `stage` values accordingly!\n\n`Save` the Workflow!"},{"id":"ba4ebb24-a086-42a4-8124-0907c31a8dd9","type":"dql","showInput":true,"filterSegments":[],"state":{"input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"matchesValue(event.kind,\"SDLC_EVENT\") and matchesValue(event.type,\"app-deployed.validated\") and matchesValue(owner,\"teamXX\") and matchesValue(proj_name,\"simplenodeservice\") and matchesValue(stage,\"preprod\")"},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":[],"dataMappings":{},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[],"variant":"single","truncationMode":"middle"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}}}},{"id":"5","type":"markdown","markdown":"\nHere is what we have done so far\n1. Created our first Site Reliability Guardian with our own Objective using DQL\n2. Automated the execution of the guardian through an SDLC Event\n\n\n#### Let's move on to Level 3 to deploy our fix and confirm our SRG is working as intended!"}]}