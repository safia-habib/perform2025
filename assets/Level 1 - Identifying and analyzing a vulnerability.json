{"version":"6","defaultTimeframe":{"from":"now()-2h","to":"now()"},"defaultSegments":[],"sections":[{"id":"e70e8f76-8eb8-4a17-a6ed-fa181776378c","type":"markdown","markdown":"# Background\nSome high risk vulnerabilities have been detected in our preproduction system. Due to the severity of risk, there is understandable concern that these could lead to a cyberattack if allowed to make it into production. \n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_SecurityOverview.png)\n\n# Objectives\nYou are tasked with finding and reviewing the vulnerabilities, determining which assets are affected, deciding **which vulnerability to fix first**, and using the relevant information in subsequent exercises to build automation to deploy a fix and ensure it is not present in any future releases of the application.\n\n## What is a vulnerability?\nA vulnerability is a weakness, flaw, or error found within software that has the potential to be leveraged by a threat agent in order to compromise a system.\n\nA common example of a vulnerability, and one of the most prevalent, is SQL injection. These vulnerabilities attempt to gain access to database content via malicious code injection. Successful SQL injections can allow attackers to modify or steal sensitive data, spoof identities, and various other harmful activities.\n\n## Why is it important to fix vulnerabilities?\nNew vulnerabilities are discovered all the time and if left unchecked they can result in devastating financial, reputational, and regulational consequences. This makes remediating vulnerabilities crucial, because it proactively prevents cyberattacks, keeping data and systems safe by addressing protential weaknesses in software. \n\n"},{"id":"1eb039d4-2e14-4ebd-a09c-0bcb632da0f6","type":"markdown","markdown":"## Step 1: Find the vulnerabilities\nLets first review the vulnerabilities within Dynatrace to understand our overall exposure. To do this, navigate to the Dynatrace application responsible for vulnerabilities.\n\n1. How many vulnerabilities are there?\n2. How many high risk vulnerabilities are there?\n3. How many medium risk vulnerabilities are there?\n4. How many low risk vulnerabilities are there?\n\n#### Hint - Use either the new experience or classic view\nVulnerabilities can be viewed using either the new experience, or the old classic view. The new experience has **'NEW'** on its icon. \n\n#### Hint - Filter based on risk level\nRegardless of whether you use the new experience, or the classic view, you can use the filter to view vulnerabilities based on their risk to the business.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_FilteringRiskLevel.png)\n"},{"id":"257a7eed-bac5-4b32-b348-2c455df85296","type":"markdown","markdown":"## Step 2: Analyze the vulnerabilities\nWith a basic overview of how many vulnerabilities have been detected in our environment, we want to use additional vulnerability context provided by Davis to determine which vulnerabilities should be addressed first. \n\n1. Do any of the vulnerabilities have public internet exposure?\n2. How many of the vulnerabilities have public exploits available?\n3. Which vulnerability has public exploits available and is also a high risk?\n\n### Hint - Filtering by davis risk assessment\nDavis considers numerous factors when assessing each vulnerability. The assessment calculates a Davis Security Score (DSS) based on the risk factors, enabling automatic prioritization of vulnerbailities and more informed decisons when appraching remediation activities. Each risk factor can be used as a filter.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_FilteringPIE.png)\n\n#### Public internet exposure options\nPublic internet exposure is one of the risk factors taken into consideration when determining the Davis Security Score. If there is public internet exposure, it means that at least one process is exposed to the internet. The following are the possible states of the assessment:\n\n* Not detected - No public internet exposure was found\n* Public network - There is public internet exposure\n* Not available - Data isn't available because the hosts aren't running in full-stack monitoring mode\n\n### Hint - Multiple filters\nThe filter field can be used to quickly find relevant information or narrow down results. The filter statement can comprise multiple fields, including but not limited to different Davis assessment risk factors and a combination of risk level and davis risk factors.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_FilteringMultiple.png)\n\n### Hint - High risk vulnerability with public exploit (Node4Shell)\nFor the purposes of this workshop, we will be focusing on a specific vulnerability: Improper Input Validation (CVE: CVE-2021-22931). \n#\nWe shall refer to it as \"Node4Shell\", just for fun.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_Node4ShellOverview.png)"},{"id":"0d8ac0fb-6169-4a6e-848c-080ee11fcbba","type":"markdown","markdown":"## Step 3 - Explore Node4Shell\nBased on our analysis in step 2, we've been able to use context to determine which vulnerability we should fix first. Now we want to drill into the specifics of the Node4Shell vulnerability to understand what exactly is affected, and what we need to do to fix it.\n#\nDrill into the Node4Shell vulnerability that has a public exploit available.\n#\n1. What is the Common Vulnerabilities and Exposures (CVE) ID for the vulnerability?\n2. How many process groups are affected?\n3. What was the original Common Vulnerability Scoring System (CVSS) score of the vulnerability?\n4. What is the vulnerability's Davis Security Score (DSS)?\n5. How many hosts are affected?\n6. What is the vulnerable component?\n7. What version(s) are vulnerable to this vulnerability?\n8. Bonus Question: Which container image contains the vulnerability?\n\n### Hint - Information needed for later exercise\nBe sure to make a note of the vulnerablity CVE ID as well as your team's respective affected process group name as this will be needed later!\n\n### Hint - Understanding the details\nThe vulnerability description will typically provide an explanation of the vulnerability, the versions affected, and its potental impact. Sometimes they will they will explicitly provide the recommended fix. However, when this is not provided, you may need to review the disclosure notes to understand the best course of action. These notes can be accessed by clicking on the links provided under the vulnerability description. \n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_Node4ShellDescription.png)\n\n#### Container image\nIf the vulnerability is affecting a component within a container, you may want to know exactly which image is responsible. The container image can be found in either the classic Third Party Vulnerability page or within the new Kubernetes experience.\n\n##### Classic Third Party Vulnerability page\nIf a specific vulnerability is affecting a component within a containe, its related container image will be displayed.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_TPVContainerImage.png)\n\n##### Kubernetes Experience\nTo find the container image, open the rollouts-demo container and choose 'Info'. The image name will be listed under Properties\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/L1_K8sContainerImage.png)\n\n"},{"id":"4b9bbd62-089d-4801-86dd-5fe5e2cf1583","type":"markdown","markdown":"## Recap\nIn this level, you have successfully:\n#\n1. Analyzed the detected vulnerabilities\n2. Leveraged the DSS and the assessed context to determine which vulnerability to fix first\n3. Gathered the information required to begin remediation"},{"id":"3a42817c-82e3-4caa-8fb9-951fbb910d9c","type":"markdown","markdown":"Now that you've completed level 1, please continue to level 2!"}]}
