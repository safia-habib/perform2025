{"version":"6","defaultTimeframe":{"from":"now()-2h","to":"now()"},"defaultSegments":[],"sections":[{"id":"e70e8f76-8eb8-4a17-a6ed-fa181776378c","type":"markdown","markdown":"# Background\nThe Site Reliability Guardian is a Dynatrace app that automates change impact analysis to validate service availability, performance, and capacity objectives across various systems. It enables DevOps platform engineers to make the right release decisions and empowers SREs to apply Service-Level Objectives (SLOs) for their critical services.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_1.png)\n\n# Objectives\nYou are tasked with using the Site Reliability Guardian to create a new guardian and specifying Objectives that you would like to validate automatically to make sure the vulnerability does not make its way into new releases. You will also create a workflow to automate the change impact analysis and leverage the validation result to enrich your release process.\n\n## Use cases for SRG\n**DevOps** can automate safe and secure releases by applying a gating mechanism that identifies release issues quickly and prevents poor-quality code from being promoted to production.\n\n**SREs** can leverage on-demand reliability validation by comparing observability data such as service-level objectives against a dedicated release version from the past, or as part of progressive delivery."},{"id":"1eb039d4-2e14-4ebd-a09c-0bcb632da0f6","type":"markdown","markdown":"## Step 1: Create a new SRG\nBegin by opening the Site Reliability Guardian App within the Dynatrace environment.\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new1.png)\n\n1. Click on `+ Guardian` to create a new Guardian\n2. SRG provides some great templates to get you started, so identify an existing template to help solve **our current problem** and click `Use Template`.\n    - **Skip** the `Entity Selection`\n3. Update the Guardian's name, perhaps with the the app name and your team name.  Enter a description, such as `release validation for our deployment`.  To integrate the Guardian into the lifecycle on our IDP, **specify the following tags**:\n    - owner = your team number (i.e. \"teamXX\")\n    - proj_name = your project name (i.e.\"simplenodeservice\")\n    - stage =  the stage of the deployed app (i.e.\"preprod\")\n    - notify = true\n4. `Save` your Guardian\n\n\n#### Hint - Use an Existing template\nSince we're dealing with a vulnerability, select the `Security Gate` Template, and complete Tasks 2-4 above\n\n![SRG Variables](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_3.png)"},{"id":"257a7eed-bac5-4b32-b348-2c455df85296","type":"markdown","markdown":"## Step 2: Update the existing Objectives\nA guardian is the grouping of objectives. It is built around a set of entities reflecting a service or application you want to safeguard.\nA guardian provides you with a default automation workflow that performs the objective validation. As a result, a guardian always represents the latest validation result derived from the objectives.\n#\n\n1. Click on each individual Objective to the Guardian\n2. Scroll down on the right side panel and update the `Define thresholds` section\n    - Select `No thresholds` to make the Objective an \"Information Objective\"\n3. **Repeat this for all 4** of the existing Objectives in our Guardian\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new2.png)"},{"id":"0d8ac0fb-6169-4a6e-848c-080ee11fcbba","type":"markdown","markdown":"## Step 3 - Define a New Objective with DQL\nObjectives are means for measuring the performance, availability, capacity, and security of your services. Objectives are measured by indicators. You can define an objective for your guardian that is validated on demand or automatically.\n\n# \n1. Click on `Add New Objective` and name the new objective `Node4Shell`.  \n2. Enter a description, such as `vulnerability detection in preprod`. \n3. Guardian objectives support DQL queries and Classic SLO metrics.  Choose `Grail using DQL`.  \n4. Paste the query below into the `DQL Query` field. \n\n```\nfetch events\n| filter event.kind == \"SECURITY_EVENT\"\n| filter event.category == \"VULNERABILITY_MANAGEMENT\"\n| filter event.status==\"OPEN\"\n| lookup [fetch dt.entity.process_group], sourceField:affected_entity.id, lookupField:id\n| fieldsRename lookup.entity.name, processName \n| filter isNotNull(processName)\n| filter matchesValue(vulnerability.external_id, \"PLACEHOLDER\")\n| filter matchesValue(processName, \"PLACEHOLDER\")\n| summarize val=arraySize(collectDistinct(vulnerability.id))\n| fields `Filtered high-profile vulnerabilities`=if(isNull(val), 0, else: val)\n```\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new3.png)"},{"id":"c7bbe479-856a-4041-a5cc-b2f4500bde58","type":"markdown","markdown":"## Step 4 - Define Static thresholds for your Objective\nThe static warning and failure thresholdsï»¿ determine whether the measured value of the indicator meets the objective, is close to violating the objective, or violates the objective.\nWarning and failure are optional; objective validation can vary:\n - If both the warning and failure thresholds are set, the objective validation can return warning, failure, or pass.\n - If just the warning threshold is set, the objective validation can return warning or pass.\n - If no threshold is set, the objective validation does not return a status but is used for informational purposes.\n\n# \n1. In the `Define thresholds` section, choose `Static thresholds`. Our query is structured such that 0 is perfect and anything greater than 0 is problematic.  \n2. Choose `A lower value is good for my result` with `Fails if result > 0`\n\n![](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new4.png)"},{"id":"5c4e6b9a-37db-4836-bdaf-ceace43b4877","type":"markdown","markdown":"## Step 5 - Update DQL Query for Node4Shell Objective\nRead **closely** through and update the Objective DQL Query (Note - you don't have to be a DQL Expert for this!)\n\n1. Find and update the PLACEHOLDERs in the Query. \n2. `Save` your Guardian!\n\n![SRG Variables](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new7.png)\n\n#### Hint - Use the following format for the PLACEHOLDERS\n1. The first `PLACEHOLDER` should be your Vulnerability Reference CVE (*i.e. CVE-XXXX-YYYYY*) \n2. The second `PLACEHOLDER` should be your affected Process Group Name from the Vulnerability (*i.e. app.js (SimpleNodeJsService) simplenodeservice-team00 preprod*)"},{"id":"e8a7751c-cf17-4675-82b5-1f9d42b56a96","type":"markdown","markdown":"## Step 6 - On Demand Validation of your SRG\nGuardians can be executed manually on-demand or through a Workflow automation.\nIn this step, we will manually validate our SRG on-demand.\n\n1. Open your Guardian and locate the `Validate` button in the top right corner.  Click it and choose `Last 1 hour` for the validation timeframe, then click `Validate`.\n\nThe validation results will show up below, shortly.\n - *Note - this Guardian should `Fail` since our vulnerability still exists in our environment!*\n\n![SRG Manual Validation](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new6.png)\n\n#### View the results in the validated objectives\nIn the Validation result, click on one of the objectives (the red/blue lines) and find details on the Validated objectives.  The result of each DQL query objective for the validation timeframe (last 30 minutes) will be shown.  The result is evaluated against the static thresholds to determine pass, warning, or fail.\n\nThe worst evaluated objective result will be used to determine the overall Guardian validation result.  That is to say, if any of the objective results fail, then the validation result is fail.  You can use Automation workflow capabilities or IDP tooling capabilities to apply additional logic and quality gating.\n\n![SRG Validation Results](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/SRG_new5.png)"},{"id":"14a4a070-2976-4271-bdd2-b8d3b8c6acae","type":"markdown","markdown":"## Step 6 - Automate SRG based on SDLC Event\nGuardians can be executed manually on-demand or through a Workflow automation.\nIn this step, we will set up automation through a Workflow. \n\n![Trigger SRG on Lifecycle Event](https://university.dynatrace.com/assets/50312/04_04_srg_lifecycle_trigger.png)\n\n1. From the Guardian overview, click on `Automate` to create a new Workflow automation\n2. A new Workflow automation will be created with an `Event Trigger` and a Site Reliability Guardian `Task` already configured.  Modify the `Event Trigger` to use `events` as the Event type.  Modify the `Filter query` using the query below:\n3. Note - you don't have to update anything in the 'run_validation' task.\n4. `Save` the Workflow!\n\n```\nmatchesValue(event.kind,\"SDLC_EVENT\") and matchesValue(event.type,\"app-deployed.validated\") and matchesValue(owner,\"teamXX\") and matchesValue(proj_name,\"simplenodeservice\") and matchesValue(stage,\"preprod\")\n```\n#### Hint - Replace fields in the Query\nBe sure to replace `owner`, `proj_name`, and `stage` values accordingly based on the tags you set up earlier!"},{"id":"4b9bbd62-089d-4801-86dd-5fe5e2cf1583","type":"markdown","markdown":"## Recap\nIn this level, you have successfully:\n#\n1. Leveraged an existing template to create your own Site Reliabity Guardian\n2. Added a new DQL-based objective to check for the Node4Shell Vulnerability\n3. Automated the execution of the guardian through an SDLC Event"},{"id":"3a42817c-82e3-4caa-8fb9-951fbb910d9c","type":"markdown","markdown":"Now that you've completed level 2, please continue to \n**Level 3 - Deploying a Fix**"}]}
