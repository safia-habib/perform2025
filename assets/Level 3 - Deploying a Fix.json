{"version":1,"defaultTimeframe":{"from":"now()-2h","to":"now()"},"defaultSegments":[],"sections":[{"id":"0","type":"markdown","markdown":"## Level 3 - Deploying a Fix\n\n![New Release](https://university.dynatrace.com/assets/50312/05_00_new_release.png)\n\n* Create a new branch on the GitLab repo\n* Create and submit a Merge Request with new version\n* Automatic release validation with Dynatrace"},{"id":"15acd854-349d-4a61-8832-128bb0ca1531","type":"markdown","markdown":"### Security Approved Container Images\n\nThe security team approves of the following container images, as they have been deemed secure for this exercise.\n\n| Service | Image | Version/Tag | Language |\n| ------- | ----- | ----------- | -------- |\n| astronomy-shop frontend | astronomy-shop/demo | astronomy-shop/demo:1.10.0-frontend | Node.js\n| astronomy-shop paymentservice | astronomy-shop/demo | astronomy-shop/demo:1.10.0-paymentservice | Node.js\n| easytrade frontend | easytrade/frontend | easytrade/frontend:a9edfaf | Node.js\n| easytrade offerservice | easytrade/offerservice| easytrade/offerservice:a9edfaf | Node.js\n| simplenodeservice | popecruzdt/simplenodeservice | popecruzdt/simplenodeservice:1.0.1 | Node.js"},{"id":"1","type":"markdown","markdown":"\n### Step 1 - View the source repo and create a new branch\n\n![GitLab New Branch](https://university.dynatrace.com/assets/50312/05_01_gitlab_create_new_branch.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. From the Backstage component page, click `View Source` to open the GitLab repo\n\n2. Click on the `+` sign and choose `New branch` to create a new (code) branch on this repo\n\n![GitLab Name Branch](https://university.dynatrace.com/assets/50312/05_01_gitlab_branch_name.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. Give the branch a unique name based on your team identifier, i.e. `change_team01`\n\n2. You can now make code (configuration) modifications on this new branch"},{"id":"a26665a5-54a2-4399-b679-04593921ba9f","type":"markdown","markdown":"\n### Hint 1 - Modify the Branch\n\n![GitLab Version Change](https://university.dynatrace.com/assets/50312/05_01_gitlab_version_change.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\nMake the following changes to the branch:\n\n1. In the `argoapp` directory, locate and edit the `app.yml` manifest.  Locate the `version` label spec and change it from `1.0.2` to `1.0.1`.  Click `Commit changes`.\n\n2. In the `manifests` directory, locate and edit the `rollout.yml` manifest.  Locate the `app.kubernetes.io/version` label spec and change it from `1.0.2` to `1.0.1`.  Locate the `image` container spec and change it from `grabnerandi/simplenodeservice:1.0.2` to `popecruzdt/simplenodeservice:1.0.1`.  Click `Commit changes`."},{"id":"2","type":"markdown","markdown":"\n### Step 2 - Create a Merge Request\n\n![GitLab Create Merge Request](https://university.dynatrace.com/assets/50312/05_01_gitlab_good_title.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. Now that the branch is changed, click on `Create merge request`\n\n2. Give the merge request a meaningful name and describe what you've changed\n\n3. Click on `Create merge request` to create a new merge request\n"},{"id":"61d0f775-b17b-48f3-bdef-9cb2f19de933","type":"markdown","markdown":"\n### Hint 2 - Merge your Change\n\n![GitLab Merge Request ArgoCD](https://university.dynatrace.com/assets/50312/05_01_argocd_sync.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. The merge request is ready to merge, click on `Merge` to merge the new branch with the main branch\n\n2. Navigate to ArgoCD and locate your app.  ArgoCD will automatically trigger a sync when it detects a change to the source.  Optionally, you can click on `Refresh` or `Sync` to speed this up and trigger a new sync\n"},{"id":"3","type":"markdown","markdown":"\n### Step 3 - Release Validation feedback\n\n![srg workflow automation execution](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/srg_workflow_automation_execution.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. Open the SRG Workflow and check the execution\n\n2. Review the `Execution Context` and validate the execution aligns to the changes in your merge request\n\n![srg validation result pass](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/srg_validation_result_pass.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. Open the SRG and check the latest validation\n\n2. Review the validation result and check if the validation passed\n\n![srg validation objectives pass](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/srg_validation_objectives_pass.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. Review the validation objectives and locate the `Node4Shell` objective\n\n2. Validate that the objective passed, indicating that the critical vulnerability has been removed as a result of your change"},{"id":"8c1cfb67-1391-46f9-b595-5af8d9d95942","type":"markdown","markdown":"\n### Hint 3 - Release Validation feedback\n\n![Dynatrace Automation](https://university.dynatrace.com/assets/50312/05_01_dynatrace_automation.png)\n\n![srg validation objectives pass](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/backstage_notification_release_validation_message.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n1. From Backstage, navigate to the Notifications page and switch to your team's channel.  As your application's new release progresses, Dynatrace will automatically post messages here.\n\n![srg validation objectives pass](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/backstage_component_release_validation_result.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n2. On the Backstage component page, locate the `Dynatrace Validations` section.  Every time the automated release validation takes place, via the Site Reliability Guardian, Dynatrace will store the result and Backstage will display it here.\n\n![srg validation objectives pass](https://raw.githubusercontent.com/safia-habib/perform2025/main/images/gitlab_merge_request_release_validation_comment.png)\n*Screenshots are for reference and may not exactly match step objectives*\n\n3. In GitLab, navigate back to your merge request.  When the SRG release validation takes place, Dynatrace will post a message (comment) on the merge request that was submitted to deploy the new release that includes the validation result.\n\nIn Dynatrace, open the Platform Cockpit Dashboard and explore all Lifecycle events for your application\n\nValidate that your app is really deployed in the new version by browsing to the app. Get the link from Backstage, Argo or the Dynatrace dashboard"}]}